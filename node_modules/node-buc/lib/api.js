/*!
 * node-buc - lib/api.js, BUC RESTful API client
 *
 * Copyright(c) 2013 Alibaba Group Holding Limited.2013 Taobao.com
 * Author: suqian.yf <suqian.yf@taobao.com>
 *
 * * http://docs.alibaba-inc.com/display/RC/BUC_DevGuide#BUC_DevGuide-WebService%E6%8E%A5%E5%8F%A3
 * * RESTful API document: http://docs.alibaba-inc.com/pages/viewpage.action?pageId=119972155
 *
 */

"use strict";

/**
 * Module dependencies.
 */

var urllib = require('urllib');
var debug = require('debug')('node-buc');

// u.alibaba-inc.com 联系 @嘉措 申请白名单
exports.API_HOST = 'buc.alibaba-inc.com';

var request = function (pathname, args, callback) {
  var url = 'http://' + exports.API_HOST + '/rpc' + pathname;
  urllib.request(url, args, function (err, result, res) {
    if (err && err.name === 'JSONResponseFormatError') {
      // try to fix \t bug http://gitlab.alibaba-inc.com/node/node-buc/issues/14
      result = result.toString().replace(/\t/g, '');
      try {
        result = JSON.parse(result);
        err = null;
      } catch (e) {}
    }
    if (err) {
      err.data = Buffer.isBuffer(result) ? result.toString() : result;
      return callback(err);
    }
    if (!result) {
      return callback();
    }

    var errMsg = result.errors && result.errors[0];
    if (errMsg) {
      err = new Error(errMsg.msg || 'HTTP Status ' + res.statusCode);
      err.name = 'BucAPIRequestError';
      err.data = result;
      return callback(err);
    }
    debug('%s %j %j', url, args, result);
    callback(null, result.content);
  });
};

/**
 * Search buc users.
 *
 * @param {String|Object} query, query keyword or query options.
 *   If query is options, must contains:
 *   - {String} q, query keyword
 *   - {String} [available=''], 是否在职  可选  留空则不限，T：在职 ； F：离职
 *   - {Number} [page=1], 页数  1~  可选  留空默认第一页
 *   - [Number] [sizePerPage=20], 每页行数   可选  默认20
 *   - {Boolean} [rightFuzzy] 右模糊查询  可选  留空则默认为true
 *   - {Boolean} [leftFuzzy] 左模糊查询  可选  留空则默认为false
 * @param {Function(err, result)} callback
 *  - {Object} result
 *   - {Number} count, total match users count.
 *   - {Array[Object]} users, match users
 */
exports.search = function (query, callback) {
  var url = '/enhancedUserQuery/findUsers/byFuzzyQuery.json';
  if (typeof query === 'string') {
    query = {
      q: query
    };
  }
  var data = {
    fuzzyStr: query.q,
  };
  if (query.available) {
    data.available = query.available;
  }
  if (query.page) {
    data.page = query.page;
  }
  if (query.sizePerPage) {
    data.sizePerPage = query.sizePerPage;
  }
  if (query.rightFuzzy !== undefined) {
    data.rightFuzzy = query.rightFuzzy;
  }
  if (query.leftFuzzy !== undefined) {
    data.leftFuzzy = query.leftFuzzy;
  }

  var args = {
    data: data,
    type: 'GET',
    dataType: 'json'
  };
  request(url, args, function (err, content) {
    if (err) {
      return callback(err);
    }
    content = content || {};
    var result = {
      count: content.count || 0,
      users: content.items || []
    };
    callback(null, result);
  });
};

var UID_RE = /^[\w\-\_\.]+$/i;

/**
 * Get buc user.
 *
 * @param {String} nick, 邮件前缀或者花名, 如 "suqian.yf" or "苏千"
 * @param {Object} [options=null], 查询参数
 *  - {String} [available=''], 是否在职  可选  留空则不限，T：在职 ； F：离职
 *  - {Boolean} [realname=false], 按真名查询，默认是按花名查询的
 *  - {Boolean} [returnAll=false], 是否只返回第一个结果，
 *    通常按照真名查询的时候，都需要配合使用，设置为 returnAll=true.
 *    一旦设置了 returnAll=true ，那么将返回一个Array数组结果.
 * @param {Function(err, user)} callback
 */
exports.get = function (nick, options, callback) {
  if (typeof options === 'function') {
    callback = options;
    options = null;
  }
  var url = '/enhancedUserQuery/findUsers/byGeneralCriteria.json';
  options = options || {};
  if (UID_RE.test(nick)) {
    options.emailPrefix = nick;
  } else {
    if (options.realname) {
      options.lastName = nick;
    } else {
      options.nickNameCn = nick;
    }
  }
  var args = {
    data: options,
    type: 'GET',
    dataType: 'json',
  };
  request(url, args, function (err, content) {
    if (err || !content) {
      return callback(err, content);
    }
    var items = content.items || [];
    callback(null, options.returnAll ? items : items[0]);
  });
};

/**
 * 根据一堆工号查询用户信息
 *
 * @param {Array} ids 工号列表
 * @param {Function(err, users)} callback
 */
exports.findUsersByIds = function (ids, callback) {
  var url = '/enhancedUserQuery/findUsers/byEmpIds.json';
  var data = {empIds: ids};
  var args = {
    data: data,
    type: 'GET',
    dataType: 'json',
  };
  request(url, args, function (err, content) {
    if (err || !content) {
      return callback(err, content);
    }
    var users = content || {};
    callback(null, users);
  });
};

/**
 * 根据一堆用户名查询用户信息
 *
 * @param {Array} accounts 户名列表
 */
exports.findUsersByAccounts = function (accounts, callback) {
  var url = '/userQuery/findUsers/byAccounts.json?containDetail=false&containUserAppProfiles=false&';
  url += accounts.map(function (account) {
    return 'accounts=' + account;
  }).join('&');
  var args = {
    type: 'GET',
    dataType: 'json',
  };
  request(url, args, function (err, content) {
    if (err || !content) {
      return callback(err, content);
    }
    var users = content || {};
    callback(null, users);
  });
};

/**
 * 根据工号查询下属信息
 *
 * @param {String|Number} id 工号
 * @param {Function(err, users)} callback
 */
// exports.getUserSubordinates = function (id, callback) {
//   var url = '/enhancedUserQuery/findChildrenByEmpId.json';
//   var data = {empId: id};
//   var args = {
//     data: data,
//     type: 'GET',
//     dataType: 'json',
//   };
//   request(url, args, function (err, content) {
//     if (err || !content) {
//       return callback(err, content);
//     }
//     var users = content || [];
//     callback(null, users);
//   });
// };
