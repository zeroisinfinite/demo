/*
 * @name: nobuc.js
 * @description: 
 *      a expressjs middleware for BUC
 *      http://docs.alibaba-inc.com/pages/viewpage.action?pageId=98078830
 *      1. register app
 *      2. get SSO_Token
 *      3. get user and new token using SSO_Token
 * @author: wondger@gmail.com
 * @date: 2013-04-26
 * @param: 
 * @todo: 
 *  [ ] 加密cookie不依赖cookie secret
 * @changelog: 
 */
var https = require("https"),
    util = require("util"),
    cipher = require("./cipher");

/*
 * @param path[RegExp]
 * @param options[Object]
 *      - env[String]: app environment
 *      - appname[String]: AppName applied in BUC
 *      - filter[Function]: filter function. middleware will use the result when return buc user object
 */
module.exports = exports = function(path, options) {
  options = Object.prototype.toString.call(options) === "[object Object]" ? options : (Object.prototype.toString.call(path) === "[object Object]" ? path: {});
  path = util.isRegExp(path) ? path : /.*/;

  if (!options || !options.appname) {
    return;
  }

  // BUC不支持login callback url自定义
  options.sendBucSSOTokenPath = (options.tokenPath || "") + "/sendBucSSOToken.do";
  options.key = Object.prototype.toString.call(options) === "[object String]" ? options.key : "buc_user";
  options.buchost = options.env === "development" ? "login-test.alibaba-inc.com" : "login.alibaba-inc.com";
  options.secret = options.secret || "buc_cookie_secret_1.0.1";
  options.host = options.host || "";

  function registerClient(backurl, callback) {
    if (!backurl) {
      callback(new Error("backurl error"));
      return;
    }

    var req = https.request({
      hostname: options.buchost,
        port: 443,
        path: "/updateAppVersion.do?APP_NAME=" + options.appname + "&BACK_URL=" + backurl + "&CLIENT_VERSION=0.3.0",
        method: "POST"
    }, function(res) {
      res.on("data", function(d) {
        //process.stdout.write(d);
      });

      if (res.statusCode === 200) {
        callback(null);
      }
      else {
        callback(new Error(res.statusCode));
      }
    });

    req.end();

    req.on('error', function(e) {
      callback(e);
    });
  }

  function register(req, res) {
    var registerBackUrl = encodeURIComponent(getUrl(req));

    registerClient(registerBackUrl, function(err) {
      if (!err) {
        res.redirect("https://" + options.buchost+ "/ssoLogin.htm?APP_NAME=" + options.appname + "&BACK_URL=" + registerBackUrl);
      }
      else {
        res.send("Register app " + err.message);
      }
    });
  }

  function getUser(token, callback) {

    var req = https.request({
      hostname: options.buchost,
        port: 443,
        path: '/rpc/sso/communicate.json?SSO_TOKEN=' + token + '&RETURN_USER=true',
        method: 'POST'
    }, function(res) {
      var chunk = "";
      res.on('data', function(d) {
        chunk += d;
      });

      res.on("end", function() {
        var d;
        try {
          d = chunk ? JSON.parse(chunk) : null;
        }
        catch(e) {
          d = null;
        }

        if (d && !d.hasError && d.content) {
          callback(null, JSON.parse(d.content));
        }
        else {
          callback(new Error("empty"));
        }
      });

      if (res.statusCode !== 200) {
        callback(new Error(res.statusCode));
      }
    });

    req.end();

    req.on('error', function(e) {
      callback(e);
    });
  }

  function getUrl(req, path) {
    return req.protocol + "://" + (options.host || req.headers.host) + (path || req.url);
  }

  return function(req, res, next) {
    if (req.url.indexOf(options.sendBucSSOTokenPath) === 0) {
      var backurl = req.query.BACK_URL || getUrl(req, "/");

      if (req.query && req.query.SSO_TOKEN) {
        getUser(req.query.SSO_TOKEN, function(err, data){

          if (err || data.errorMessage) {
            //res.send("Get user info " + err.message + "<br /><a href='#nogo'>重新登录</a>");
            register(req, res);
            return;
          }

          if (data) {
            res.cookie("_nb_tk_", cipher.encrypt(String(data.token), options.secret), {"path": "/", "httpOnly": true});
            res.redirect(backurl);
          }
          else {
            res.send("Login error.");
          }
        });
      }
    }

    else if (!path.test(req.url)) {
      next();
      return;
    }

    else if ("function" === typeof options.filter && options.filter(req)) {
      next();
      return;
    }

    else {
      if (!req.cookies || !req.cookies._nb_tk_) {
        register(req, res);
      }
      else {
        // todo: 避免每次查询将session有效期的结果存入session
        getUser(cipher.decrypt(req.cookies._nb_tk_, options.secret), function(err, data){
          if (err || data.errorMessage) {
            //res.send("Get user info " + err.message + "<br /><a href='#nogo'>重新登录</a>");
            register(req, res);
            return;
          }

          if (data) {
            if (data.available === "T") {
              req[options.key] = {
                id: data.id,
        havanaId: data.havanaId,
        authType: data.authType,
        account: data.account,
        empId: data.empId,
        depId: data.depId,
        loginName: data.loginName || data.account,
        firstName: data.firstName,
        lastName: data.lastName,
        nick: data.nickNameCn || data.lastName,
        gender: data.gender,
        hireDate: data.hireDate,
        jobDesc: data.jobDesc,
        aliWW: data.aliWW,
        tbWW: data.tbWW,
        email: data.emailAddr,
        busnPhone: data.busnPhone,
        extensionPhone: data.extensionPhone,
        cellphone: data.cellphone,
        locationDesc: data.locationDesc,
        emailPrefix: data.emailPrefix,
        depDesc: data.depDesc,
        supervisorName: data.supervisorName
              };
              req["_" + options.key] = data;
              res.cookie("_nb_tk_", cipher.encrypt(String(data.token), options.secret), {"path": "/", "httpOnly": true});
            }

            next();
          }
          else {
            res.clearCookie("_nb_tk_");
            //register(req, res);
          }
        });
      }
    }
  };
}
